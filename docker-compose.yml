services:
  # NEXON services
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: didiskywalker/nexon-frontend
    container_name: nexon_frontend
    ports: 
      - 3000:80
    networks:
      - internal
      - public

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: didiskywalker/nexon-backend
    container_name: nexon_backend
    ports:
      - 8000:80
    networks:
      - internal
      - public
    environment:
      - NEXON_MONGO_HOST=${NEXON_MONGO_HOST}
      - NEXON_MONGO_PORT=${NEXON_MONGO_PORT}
      - NEXON_MONGO_USER=${NEXON_MONGO_USER}
      - NEXON_MONGO_PASS=${NEXON_MONGO_PASS}
      - NEXON_MONGO_DB=${NEXON_MONGO_DB}
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    container_name: nexon_db
    ports:
      - 27017:27017
    networks:
      - internal
      - public
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${NEXON_MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${NEXON_MONGO_PASS}
      - MONGO_INITDB_DATABASE=${NEXON_MONGO_DB}

  # MLflow services
  s3:
    image: minio/minio:RELEASE.2023-11-01T18-37-25Z
    container_name: mlflow_s3
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    command: server /data --console-address ":9001"
    networks:
      - internal
      - public
    volumes:
      - ./mlflow_data/s3:/data
  mysqldb:
    image: mysql:8-oracle # -oracle tag supports arm64 architecture!
    restart: unless-stopped
    container_name: mlflow_db
    expose:
      - "3306"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./mlflow_data/db:/var/lib/mysql
    networks:
      - internal

  mlflow:
    image: ghcr.io/mlflow/mlflow
    container_name: mlflow_tracking
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - public
      - internal
    entrypoint: mlflow server -h 0.0.0.0
    environment:
      - MLFLOW_BACKEND_STORE_URI="mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysqldb:3306/${MYSQL_DATABASE}"
      - MLFLOW_REGISTRY_STORE_URI="mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysqldb:3306/${MYSQL_DATABASE}"
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://${AWS_BUCKET_NAME}/
      - MLFLOW_ARTIFACTS_DESTINATION=s3://${AWS_BUCKET_NAME}/
    depends_on:
      - mysqldb

  create_s3_buckets:
    image: minio/mc
    depends_on:
      - "s3"
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://s3:9000 '${AWS_ACCESS_KEY_ID}' '${AWS_SECRET_ACCESS_KEY}') do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/${AWS_BUCKET_NAME};
      exit 0;
      "
    networks:
      - internal

  run_experiments:
    build:
      context: ./mlflow_experiments
      dockerfile: Dockerfile
    container_name: run_experiments
    platform: linux/amd64  # once continuumio/miniconda3:latest image work on native aarch64 (arm), remove this line 
    depends_on:
      - "mlflow"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_REGION}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    entrypoint: >
      /bin/sh -c "
      python3 mlflow_tracking.py;
      exit 0;
      "
    networks:
      - internal
networks:
  internal:
  public:
    driver: bridge